# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddWorkLogInput {
  content: String!
  links: [String!]! = []
  projectId: String!
  sessionId: String!
}

type Break {
  _count: BreakCount!
  createdAt: DateTime!
  duration: Int!
  endTime: DateTime
  id: ID!
  segments: [Segment!]
  session: Session!
  sessionId: String!
  startTime: DateTime!
  type: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type BreakCount {
  segments: Int!
}

"""The type of break"""
enum BreakType {
  LUNCH
  OTHER
  SHORT
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  addWorkLog(input: AddWorkLogInput!): WorkLog!
  deleteWorkLog(id: ID!): Boolean!
  endBreak(id: ID!): Break!
  endSession(id: ID!): Session!
  startBreak(input: StartBreakInput!, sessionId: ID!): Break!
  startSession(input: StartSessionInput!): Session!
  switchProject(input: SwitchProjectInput!, sessionId: ID!): Session!
  updateWorkLog(id: ID!, input: UpdateWorkLogInput!): WorkLog!
}

type Project {
  _count: ProjectCount!
  createdAt: DateTime!
  id: ID!
  isCustom: Boolean!
  name: String!
  segments: [Segment!]
  sessions: [Session!]
  updatedAt: DateTime!
  user: User!
  userId: String!
  workLogs: [WorkLog!]
}

type ProjectCount {
  segments: Int!
  sessions: Int!
  workLogs: Int!
}

type Query {
  activeSession: Session
  hello: String!
}

type Segment {
  break: Break
  breakId: String
  createdAt: DateTime!
  duration: Int!
  endTime: DateTime
  id: ID!
  project: Project
  projectId: String
  session: Session!
  sessionId: String!
  startTime: DateTime!
  type: String!
  updatedAt: DateTime!
}

type Session {
  _count: SessionCount!
  breaks: [Break!]
  createdAt: DateTime!
  endTime: DateTime
  id: ID!
  project: Project
  projectId: String
  segments: [Segment!]
  startTime: DateTime!
  status: String!
  totalBreakTime: Int!
  totalDuration: Int!
  updatedAt: DateTime!
  user: User!
  userId: String!
  workLogs: [WorkLog!]
}

type SessionCount {
  breaks: Int!
  segments: Int!
  workLogs: Int!
}

input StartBreakInput {
  type: BreakType!
}

input StartSessionInput {
  projectId: String!
}

input SwitchProjectInput {
  projectId: String!
}

input UpdateWorkLogInput {
  content: String
  links: [String!]
  projectId: String
}

type User {
  _count: UserCount!
  breaks: [Break!]
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  password: String!
  projects: [Project!]
  role: String!
  sessions: [Session!]
  updatedAt: DateTime!
  workLogs: [WorkLog!]
}

type UserCount {
  breaks: Int!
  projects: Int!
  sessions: Int!
  workLogs: Int!
}

type WorkLog {
  content: String!
  createdAt: DateTime!
  id: ID!
  links: [String!]
  project: Project!
  projectId: String!
  session: Session!
  sessionId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}