# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddWorkLogInput {
  content: String!
  links: [String!]! = []
  projectId: String!
  sessionId: String!
}

type AuthPayload {
  token: String!
  user: User!
}

type Break {
  _count: BreakCount!
  createdAt: DateTime!
  duration: Int!
  endTime: DateTime
  id: ID!
  segments: [Segment!]
  session: Session!
  sessionId: String!
  startTime: DateTime!
  type: BreakType!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type BreakCount {
  segments: Int!
}

enum BreakType {
  LUNCH
  OTHER
  PRAYER
  SHORT
}

type Call {
  answeredAt: DateTime
  caller: User!
  createdAt: DateTime!
  id: String!
  meetingLink: String
  receiver: User!
  status: CallStatus!
}

"""Status of a call"""
enum CallStatus {
  ACCEPTED
  ENDED
  PENDING
  REJECTED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GetSessionDatesInput {
  endDate: DateTime!
  startDate: DateTime!
}

input GetSessionsInput {
  endDate: DateTime
  projectIds: [String!]
  sortDescending: Boolean
  startDate: DateTime
  statuses: [SessionStatus!]
}

input LoginInput {
  email: String!
  password: String!
}

type MeetingAttendee {
  displayName: String!
  duration: Float!
  emailAddress: String!
  joinDateTime: String!
  leaveDateTime: String
}

type MeetingHistoryItem {
  endDateTime: String!
  isOnlineMeeting: Boolean!
  joinUrl: String
  startDateTime: String!
  subject: String!
}

type MeetingStatus {
  isInMeeting: Boolean!
}

type Mutation {
  addWorkLog(input: AddWorkLogInput!): WorkLog!
  cancelCall(callId: String!): Call!
  cleanupInconsistentBreaks: String!
  createOnlineMeeting(endTime: String!, startTime: String!, subject: String!, userId: String!): OnlineMeeting!
  deleteWorkLog(id: ID!): Boolean!
  endBreak(breakId: ID!): Break!
  endCall(callId: String!): Call!
  endSession(id: ID!): Session!
  handleCallResponse(accept: Boolean!, callId: String!): Call!
  hashPassword(password: String!): String!
  initiateCall(receiverId: String!): Call!
  login(input: LoginInput!): AuthPayload!
  logout: Boolean!
  register(input: RegisterInput!): AuthPayload!
  registerSeedUser: AuthPayload!
  startBreak(input: StartBreakInput!): Break!
  startSession(input: StartSessionInput!): Session!
  switchProject(input: SwitchProjectInput!): Session!
  testInitiateCall(callerId: String!, receiverId: String!): Call!
  updateProfile(input: UpdateProfileInput!): User!
  updateWorkLog(input: UpdateWorkLogInput!): WorkLog!
}

type OnlineMeeting {
  endDateTime: String!
  id: ID!
  joinUrl: String!
  startDateTime: String!
  subject: String!
}

type OrganizationMeeting {
  endDateTime: String!
  id: ID!
  joinUrl: String!
  organizerEmail: String!
  organizerName: String!
  startDateTime: String!
  subject: String!
}

type Project {
  _count: ProjectCount!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  name: String!
  segments: [Segment!]
  sessions: [Session!]
  slug: String!
  updatedAt: DateTime!
  workLogs: [WorkLog!]
}

type ProjectCount {
  segments: Int!
  sessions: Int!
  workLogs: Int!
}

type Query {
  activeSession: Session
  adminSession(sessionId: ID!): Session
  adminSessionWorkLogs(sessionId: ID!): [WorkLog!]!
  adminUserSessions(input: GetSessionsInput!, userId: ID!): [Session!]!
  adminUsers: [User!]!
  checkUserInMeeting(userId: String!): MeetingStatus!
  debugData: String!
  getAllUsers: [TeamsUser!]!
  getAllUsersWithPresence: [TeamsUserWithPresence!]!
  getBreakNotificationDuration: Float!
  getUserMeetingHistory(endDate: String!, startDate: String!, userId: String!): [MeetingHistoryItem!]!
  getUserMeetings(userId: String!): [OrganizationMeeting!]!
  getUsers: [User!]!
  hello: String!
  me: User!
  projects: [Project!]!
  session(id: ID!): Session
  sessionWorkLogs(sessionId: ID!): [WorkLog!]!
  userSessionDates(input: GetSessionDatesInput!): [SessionDate!]!
  userSessions(input: GetSessionsInput!): [Session!]!
}

input RegisterInput {
  email: String!
  name: String!
  password: String!
}

type Segment {
  break: Break
  breakId: String
  createdAt: DateTime!
  duration: Int!
  endTime: DateTime
  id: ID!
  project: Project
  projectId: String
  session: Session!
  sessionId: String!
  startTime: DateTime!
  type: SegmentType!
  updatedAt: DateTime!
}

enum SegmentType {
  BREAK
  WORK
}

type Session {
  _count: SessionCount!
  breaks: [Break!]
  createdAt: DateTime!
  endTime: DateTime
  id: ID!
  project: Project
  projectId: String
  segments: [Segment!]
  startTime: DateTime!
  status: SessionStatus!
  totalBreakTime: Int!
  totalDuration: Int!
  updatedAt: DateTime!
  user: User!
  userId: String!
  workLogs: [WorkLog!]
}

type SessionCount {
  breaks: Int!
  segments: Int!
  workLogs: Int!
}

type SessionDate {
  id: ID!
  startTime: DateTime!
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  TERMINATED
}

input StartBreakInput {
  sessionId: ID!
  type: BreakType!
}

input StartSessionInput {
  projectId: String!
}

input SwitchProjectInput {
  projectId: String!
  sessionId: String!
}

type TeamsUser {
  displayName: String!
  id: ID!
  mail: String!
  userPrincipalName: String!
}

type TeamsUserWithPresence {
  displayName: String!
  id: ID!
  isInMeeting: Boolean!
  mail: String!
  userPrincipalName: String!
}

input UpdateProfileInput {
  avatarUrl: String
  name: String!
}

input UpdateWorkLogInput {
  content: String
  links: [String!]
  projectId: String
  workLogId: ID!
}

type User {
  _count: UserCount!
  activeSession: Session
  avatarUrl: String
  breaks: [Break!]
  createdAt: DateTime!
  currentStatus: String
  email: String!
  id: ID!
  isOnline: Boolean!
  name: String!
  password: String!
  role: UserRole!
  sessions: [Session!]
  updatedAt: DateTime!
  workLogs: [WorkLog!]
}

type UserCount {
  breaks: Int!
  sessions: Int!
  workLogs: Int!
}

enum UserRole {
  ADMIN
  USER
}

type WorkLog {
  content: String!
  createdAt: DateTime!
  id: ID!
  links: [String!]
  project: Project!
  projectId: String!
  session: Session!
  sessionId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}